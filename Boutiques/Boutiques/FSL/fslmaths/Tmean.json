{
	"tool-version": "1.0.0",
	"name": "Tmean",
	"author": "TONIC",
	"description": "Usage: fslmaths [-dt <datatype>] <first_input> [operations and inputs] <output> [-odt <datatype>]\n\nDatatype information:\n -dt sets the datatype used internally for calculations (default float for all except double images)                                                                                                                                                                     -odt sets the output datatype ( default is float )\n\n Possible datatypes are: char short int float double input\n \"input\" will set the datatype to that of the original image\n\n\n\n\n\nBinary operations:\n  (some inputs can be either an image or a number)\n -add   : add following input to current image\n -sub   : subtract following input from current image\n -mul   : multiply current image by following input\n -div   : divide current image by following input\n -rem   : modulus remainder - divide current image by following input and take remainder\n -mas   : use (following image>0) to mask current image\n -thr   : use following number to threshold current image (zero anything below the number)\n -thrp  : use following percentage (0-100) of ROBUST RANGE to threshold current image (zero anything below the number)\n -thrP  : use following percentage (0-100) of ROBUST RANGE of non-zero voxels and threshold below\n -uthr  : use following number to upper-threshold current image (zero anything above the number)\n -uthrp : use following percentage (0-100) of ROBUST RANGE to upper-threshold current image (zero anything above the number)\n -uthrP : use following percentage (0-100) of ROBUST RANGE of non-zero voxels and threshold above\n -max   : take maximum of following input and current image\n -min   : take minimum of following input and current image\n -seed  : seed random number generator with following number\n -restart : replace the current image with input for future processing operations\n -save : save the current working image to the input filename\n\nBasic unary operations:\n -exp   : exponential\n -log   : natural logarithm\n -sin   : sine function\n -cos   : cosine function\n -tan   : tangent function\n -asin  : arc sine function\n -acos  : arc cosine function\n -atan  : arc tangent function\n -sqr   : square\n -sqrt  : square root\n -recip : reciprocal (1\/current image)\n -abs   : absolute value\n -bin   : use (current image>0) to binarise\n -binv  : binarise and invert (binarisation and logical inversion)\n -fillh : fill holes in a binary mask (holes are internal - i.e. do not touch the edge of the FOV)\n -fillh26 : fill holes using 26 connectivity\n -index : replace each nonzero voxel with a unique (subject to wrapping) index number\n -grid <value> <spacing> : add a 3D grid of intensity <value> with grid spacing <spacing>\n -edge  : edge strength\n -tfce <H> <E> <connectivity>: enhance with TFCE, e.g. -tfce 2 0.5 6 (maybe change 6 to 26 for skeletons)\n -tfceS <H> <E> <connectivity> <X> <Y> <Z> <tfce_thresh>: show support area for voxel (X,Y,Z)\n -nan   : replace NaNs (improper numbers) with 0\n -nanm  : make NaN (improper number) mask with 1 for NaN voxels, 0 otherwise\n -rand  : add uniform noise (range 0:1)\n -randn : add Gaussian noise (mean=0 sigma=1)\n -inm <mean> :  (-i i ip.c) intensity normalisation (per 3D volume mean)\n -ing <mean> :  (-I i ip.c) intensity normalisation, global 4D mean)\n -range : set the output calmin\/max to full data range\n\nMatrix operations:\n -tensor_decomp : convert a 4D (6-timepoint )tensor image into L1,2,3,FA,MD,MO,V1,2,3 (remaining image in pipeline is FA)\n\nKernel operations (set BEFORE filtering operation if desired):\n -kernel 3D : 3x3x3 box centered on target voxel (set as default kernel)\n -kernel 2D : 3x3x1 box centered on target voxel\n -kernel box    <size>     : all voxels in a cube of width <size> mm centered on target voxel\n -kernel boxv   <size>     : all voxels in a cube of width <size> voxels centered on target voxel, CAUTION: size should be an odd number\n -kernel boxv3  <X> <Y> <Z>: all voxels in a cuboid of dimensions X x Y x Z centered on target voxel, CAUTION: size should be an odd number\n -kernel gauss  <sigma>    : gaussian kernel (sigma in mm, not voxels)\n -kernel sphere <size>     : all voxels in a sphere of radius <size> mm centered on target voxel\n -kernel file   <filename> : use external file as kernel\n\nSpatial Filtering operations: N.B. all options apart from -s use the default kernel or that _previously_ specified by -kernel\n -dilM    : Mean Dilation of non-zero voxels\n -dilD    : Modal Dilation of non-zero voxels\n -dilF    : Maximum filtering of all voxels\n -dilall  : Apply -dilM repeatedly until the entire FOV is covered\n -ero     : Erode by zeroing non-zero voxels when zero voxels found in kernel\n -eroF    : Minimum filtering of all voxels\n -fmedian : Median Filtering\n -fmean   : Mean filtering, kernel weighted (conventionally used with gauss kernel)\n -fmeanu  : Mean filtering, kernel weighted, un-normalised (gives edge effects)\n -s <sigma> : create a gauss kernel of sigma mm and perform mean filtering\n -subsamp2  : downsamples image by a factor of 2 (keeping new voxels centred on old)\n -subsamp2offc  : downsamples image by a factor of 2 (non-centred)\n\nDimensionality reduction operations:\n  (the \"T\" can be replaced by X, Y or Z to collapse across a different dimension)\n -Tmean   : mean across time\n -Tstd    : standard deviation across time\n -Tmax    : max across time\n -Tmaxn   : time index of max across time\n -Tmin    : min across time\n -Tmedian : median across time\n -Tperc <percentage> : nth percentile (0-100) of FULL RANGE across time\n -Tar1    : temporal AR(1) coefficient (use -odt float and probably demean first)\n\nBasic statistical operations:\n -pval    : Nonparametric uncorrected P-value, assuming timepoints are the permutations; first timepoint is actual (unpermuted) stats image\n -pval0   : Same as -pval, but treat zeros as missing data\n -cpval   : Same as -pval, but gives FWE corrected P-values\n -ztop    : Convert Z-stat to (uncorrected) P\n -ptoz    : Convert (uncorrected) P to Z\n -rank    : Convert data to ranks (over T dim)\n -ranknorm: Transform to Normal dist via ranks\n\nMulti-argument operations:\n -roi <xmin> <xsize> <ymin> <ysize> <zmin> <zsize> <tmin> <tsize> : zero outside roi (using voxel coordinates). Inputting -1 for a size will set it to the full image extent for that dimension.\n -bptf  <hp_sigma> <lp_sigma> : (-t in ip.c) Bandpass temporal filtering; nonlinear highpass and Gaussian linear lowpass (with sigmas in volumes, not seconds); set either sigma<0 to skip that filter\n -roc <AROC-thresh> <outfile> [4Dnoiseonly] <truth> : take (normally binary) truth and test current image in ROC analysis against truth. <AROC-thresh> is usually 0.05 and is limit of Area-under-ROC measure FP axis. <outfile> is a text file of the ROC curve (triplets of values: FP TP threshold). If the truth image contains negative voxels these get excluded from all calculations. If <AROC-thresh> is positive then the [4Dnoiseonly] option needs to be set, and the FP rate is determined from this noise-only data, and is set to be the fraction of timepoints where any FP (anywhere) is seen, as found in the noise-only 4d-dataset. This is then controlling the FWE rate. If <AROC-thresh> is negative the FP rate is calculated from the zero-value parts of the <truth> image, this time averaging voxelwise FP rate over all timepoints. In both cases the TP rate is the average fraction of truth=positive voxels correctly found.\n\nCombining 4D and 3D images:\n If you apply a Binary operation (one that takes the current image and a new image together), when one is 3D and the other is 4D,\n the 3D image is cloned temporally to match the temporal dimensions of the 4D image.\n\ne.g. fslmaths inputVolume -add inputVolume2 output_volume\n     fslmaths inputVolume -add 2.5 output_volume\n     fslmaths inputVolume -add 2.5 -mul inputVolume2 output_volume\n\n     fslmaths 4D_inputVolume -Tmean -mul -1 -add 4D_inputVolume demeaned_4D_inputVolume\n\n\n",
	"schema-version": "0.5",
	"container-image": {
		"image": "bids\/mrtrix3_connectome",
		"type": "docker"
	},
	"inputs": [
		{
			"description": "4D image (NIFTI)",
			"value-key": "[4D_IMAGE__NIFTI_]",
			"type": "File",
			"optional": false,
			"id": "4d_image__nifti_",
			"name": "4D image (NIFTI)"
		}
	],
	"output-files": [
		{
			"description": "time-averaged image",
			"value-key": "[TIME-AVERAGED_IMAGE]",
			"path-template": "dwi_mean.nii",
			"optional": false,
			"id": "time-averaged_image",
			"name": "time-averaged image"
		}
	],
	"command-line": "fslmaths [4D_IMAGE__NIFTI_] -Tmean [TIME-AVERAGED_IMAGE]"
}
